#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef CXENSESDK_TV_SWIFT_H
#define CXENSESDK_TV_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CxenseSDK_TV",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC12CxenseSDK_TV16BaseEventBuilder")
@interface BaseEventBuilder : NSObject
/// Set alternative specification for eventId.
/// \param eventRnd identifier of event
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)setRnd:(NSString * _Nonnull)eventRnd SWIFT_WARN_UNUSED_RESULT;
/// Store property’s value under specified key.
/// \param key name of the key under which property’s value will be stored
///
/// \param value property’s value that will be stored
///
- (nonnull instancetype)addParameterForKey:(NSString * _Nonnull)key withValue:(id _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("CCECustomParameter")
@interface CXCceCustomParameter : NSObject
- (nonnull instancetype)initWithGroup:(NSString * _Nonnull)group item:(NSString * _Nonnull)item type:(NSString * _Nullable)type OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum CXNetworkRestriction : NSInteger;
enum CXDispatchMode : NSInteger;

/// Protocol defines properties requirements set that is vital for configuring
/// work of Cxense SDK.
SWIFT_CLASS_NAMED("Configuration")
@interface CXConfiguration : NSObject
/// Name of the user on behalve of which API services will be called.
/// Can be obtained from {dmp|insight}.cxense.com
/// This is required property.
@property (nonatomic, copy) NSString * _Nonnull userName;
/// API key of the user on behalve of which API services will be called.
/// Can be obtained from {dmp|insight}.cxense.com
/// This is required property.
@property (nonatomic, copy) NSString * _Nonnull apiKey;
/// Defines timeout in seconds between attempts to send all reported
/// event by dispatch loop.
/// By default it will be set to 30 seconds.
@property (nonatomic) NSTimeInterval dispatchInterval;
/// Defines time period in seconds during which all reported events
/// that were already sent to back-end will last in the local database.
/// After that period all events were considered outdated will be removed
/// from local database.
/// By default it will be set to 7 days.
@property (nonatomic) NSTimeInterval outdatedTimeout;
/// Defines network conditions upon which dispatch can send events.
/// By default it will be set to ‘.none’.
@property (nonatomic) enum CXNetworkRestriction networkRestriction;
/// Defines dispatch conditions upon which events will be sent.
/// By default it will be set to ‘.online’.
@property (nonatomic) enum CXDispatchMode dispatchMode;
/// Defines identifier of persisted query that will be used for
/// performance events pushing through DMP pixel.
@property (nonatomic, copy) NSString * _Nullable dmpPushPersistentId;
/// User agent string that will be reported in all API calls
/// as ‘User-Agent’ http header.
/// By default it will be obtained from WKWebView.
@property (nonatomic, copy) NSString * _Nonnull userAgent;
/// Shows whether automatic meta-information tracking is enabled or not.
/// Under meta-information following items are meant:
/// <ul>
///   <li>
///     app name
///   </li>
///   <li>
///     app version
///   </li>
///   <li>
///     sdk version
///   </li>
/// </ul>
/// In case this flag is enabled, all specified parameters will be send
/// as events’ custom parameters.
/// By default it will be set to ‘true’.
@property (nonatomic) BOOL autoMetaInfTrackingEnabled;
/// Global callback functions that will be invoked on each event dispatch operation.
/// Can be used to debug events sending and see exact reqsons that prevented events’ dispatch.
@property (nonatomic, copy) void (^ _Nullable eventsCallback)(NSString * _Nonnull, BOOL, NSError * _Nullable);
/// Initialize new configuration instance with specified user name and API key.
/// All other parameters will have default values set.
/// \param userName name of the user under which API will be accessed.
///
/// \param apiKey API key. It can be obtained from https://{insight|dmp}.cxense.com
///
- (nonnull instancetype)initWithUserName:(NSString * _Nonnull)userName apiKey:(NSString * _Nonnull)apiKey OBJC_DESIGNATED_INITIALIZER;
/// Initialize new configuration instance.
/// All parameters will have default values set.
- (nonnull instancetype)init;
@end

/// Describes consent options.
typedef SWIFT_ENUM_NAMED(NSInteger, CXConsentOption, "ConsentOptions", open) {
/// Required, set if this event was obtained and may only be processed with the user’s consent
  CXConsentOptionConsentRequired = 0,
/// Page view tracking, DMP event tracking and browsing habit collection to understand a user’s interests and profile
  CXConsentOptionPvAllowed = 1,
/// Personalisation of content recommendations and suggested content based on user interests and browsing habits
  CXConsentOptionRecsAllowed = 2,
/// Audience segmentation, processing of browsing habits and first party data to include users in specific audience segments
  CXConsentOptionSegmentAllowed = 3,
/// Targeting advertising based on browsing habits and audience segmentation
  CXConsentOptionAdAllowed = 4,
};


SWIFT_CLASS_NAMED("ContentContext")
@interface CXContentContext : NSObject
/// The URL.
@property (nonatomic, copy) NSString * _Nullable url;
/// Specifies/overrides the pageclass of the current page.
@property (nonatomic, copy) NSString * _Nullable pageclass;
/// Specifies/overrides the sentiment of the current page.
@property (nonatomic, copy) NSString * _Nullable sentiment;
/// Specifies/overrides the recs-recommending setting of the current page.
@property (nonatomic) BOOL recommending;
/// Specifies/overrides the categories of the current page.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable categories;
/// Parameter object. Object with key and value. This is used for placeholders.
@property (nonatomic, copy) NSArray<NSDictionary<NSString *, NSString *> *> * _Nullable parameters;
/// A list of dynamic keywords describing the context.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable keywords;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable neighbors;
/// The URL of the document that ‘linked’ to this page.
@property (nonatomic, copy) NSString * _Nullable referrer;
/// Convenience parameters setter function
- (void)addParameter:(NSString * _Nonnull)key :(NSString * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("ContentRecommendation")
@interface CXContentRecommendation : NSObject
@property (nonatomic, copy) NSString * _Nonnull url;
@property (nonatomic, copy) NSString * _Nonnull clickUrl;
@property (nonatomic, copy) NSString * _Nonnull title;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable data;
@property (nonatomic, copy) NSString * _Nullable dominantthumbnail;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ContentUser")
@interface CXContentUser : NSObject
/// Dictionary of IDs (key-value where id-type is key, and the id is value).
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull ids;
/// Array of likes.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable likes;
/// Array of dislikes.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable dislikes;
- (nonnull instancetype)initWithIds:(NSDictionary<NSString *, NSString *> * _Nonnull)ids likes:(NSArray<NSString *> * _Nullable)likes dislikes:(NSArray<NSString *> * _Nullable)dislikes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ContentWidget")
@interface CXContentWidget : NSObject
/// The widget id for the widget in Cxense Content.
@property (nonatomic, copy) NSString * _Nonnull widgetId;
/// Optional context for the widget.
@property (nonatomic, strong) CXContentContext * _Nullable context;
/// Optional user for the widget.
@property (nonatomic, strong) CXContentUser * _Nullable user;
/// Optional list of consent options.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable consent;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id context:(CXContentContext * _Nullable)context user:(CXContentUser * _Nullable)user consent:(NSArray<NSString *> * _Nullable)consent OBJC_DESIGNATED_INITIALIZER;
/// Registers a click on the recommendation.
/// \param reco recommendation item with which click was performed
///
- (void)trackClickFor:(CXContentRecommendation * _Nonnull)reco;
/// Fetches recommendation items using the properties set on the widget.
/// The recommendations are returned in the completion block as well as stored in the items property.
/// \param withCallback callback function that will be executed after recieving result or error
///
- (void)fetchItemsWithCallback:(void (^ _Nonnull)(NSArray<CXContentRecommendation *> * _Nullable, NSError * _Nullable))callback;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CXDmpCustomParameter;
@class CXDmpUserIdentifier;

/// Class is responsible for performance event instances creation.
SWIFT_CLASS_NAMED("ConversionEventBuilder")
@interface CXConversionEventBuilder : BaseEventBuilder
/// Set exact time of an event.
/// \param interval exact time of event
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)setTime:(NSTimeInterval)interval SWIFT_WARN_UNUSED_RESULT;
/// Set a value uniquely identifying this event.
/// Note: pay attention that multiple events on the same screen / page must have distinct ‘eventId’ values.
/// \param eid identifier of event
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)setEventId:(NSInteger)eid SWIFT_WARN_UNUSED_RESULT;
/// Set a value uniquely identifying the corresponding page view event.
/// \param pvId identifier of page view event
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)setPageViewEventId:(NSInteger)pvId SWIFT_WARN_UNUSED_RESULT;
/// Set an alternative identifier of associated page view event.
/// Note: ‘prnd’ value (which is pv event’s identifier) can be retrieved from page view event instance.
/// \param pvId identifier of page view event
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)setPrnd:(NSString * _Nonnull)pvId SWIFT_WARN_UNUSED_RESULT;
/// Set segments identifiers to event.
/// Note: pay attention that this method will overwrite segment ids that were
/// previously added by ‘addSegmentId’ function.
/// \param ids identifiers of segments
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)setSegmentIds:(NSArray<NSString *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
/// Add identifier of the segment to event.
/// \param segmentId identifier of segment
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)addSegmentId:(NSString * _Nonnull)segmentId SWIFT_WARN_UNUSED_RESULT;
/// Add custom-parameter to performance event.
/// Note: Custom parameters - an optional list of customer-defined parameters.
/// Parameters fed with DMP events follow the same syntactical restrictions and limits as
/// for ordinary custom-parameters for analytics events.
/// \param param performance event’s custom parameter descriptor
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)addCustomParameter:(CXDmpCustomParameter * _Nonnull)param SWIFT_WARN_UNUSED_RESULT;
/// Create performance event builder’s instance that can be used for
/// event’s creation and parameters validation.
/// \param name event’s name. It is strongly recommended to provide unique name for the event.
///
/// \param type differentiates various event types, e.g., “click”, “impression”, “conversion”, etc.
///
/// \param origin differentiates various DMP applications used by the customer. Must be prefixed
/// by the customer prefix.
///
/// \param siteId the analytics site identifier to be associated with the events.
///
/// \param uids list of known user identities to identify the user. Note that different users must be fed
/// as different events.
///
///
/// returns:
/// event builder instance
+ (CXConversionEventBuilder * _Nonnull)makeBuilderWithName:(NSString * _Nonnull)name type:(NSString * _Nonnull)type origin:(NSString * _Nonnull)origin siteId:(NSString * _Nonnull)siteId andUserIds:(NSArray<CXDmpUserIdentifier *> * _Nonnull)uids SWIFT_WARN_UNUSED_RESULT;
@end


@class CXPerformanceEvent;

@interface CXConversionEventBuilder (SWIFT_EXTENSION(CxenseSDK_TV))
- (CXPerformanceEvent * _Nullable)build:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

@class CXEvent;
@class CXQueueStatus;

/// Main and the only class you need to use to get access to Cxense APIs.
SWIFT_CLASS_NAMED("Cxense")
@interface CXCxense : NSObject
/// Track active time for event with particular name.
/// \param name name of the event for which active time must be tracked
///
+ (void)trackActiveTimeForEvent:(NSString * _Nonnull)name activeTime:(NSInteger)activeTime;
/// Schedule specified event to dispatching it to back-end.
/// important:
///
/// This function behaves differently according to consent options given. If user consent is required, but
/// ‘pv’ option was not given - event will not be reported.
/// \param event event of certain type
///
+ (void)reportEvent:(CXEvent * _Nonnull)event;
/// Schedule specified event to dispatching it to back-end.
/// important:
///
/// This function behaves differently according to consent options given. If user consent is required, but
/// ‘pv’ option was not given - event will not be reported.
/// \param event event of certain type
///
+ (void)reportConversionEvent:(CXEvent * _Nonnull)event;
/// Initialize Cxense SDK with provided configuration.
/// \param config configuration holder that will be used for the SDK setup
///
/// \param completion callback parameter to indicate that config was completed (in case of invocation in background thread
///
///
/// throws:
/// ConfigurationError instance in case configuration is not valid
+ (BOOL)initializeWithConfiguration:(CXConfiguration * _Nonnull)config error:(NSError * _Nullable * _Nullable)error :(void (^ _Nullable)(void))completion;
/// Returns the default user identifier is being used for events tracking, unless you override it for event.
/// This id uses the IDFV identifier for vendors
///
/// returns:
/// default user id
+ (NSString * _Nonnull)defaultUserId SWIFT_WARN_UNUSED_RESULT;
/// Forces sending events from queue to server.
+ (void)flushEventQueue;
/// Returns current event queue status.
/// Note:
/// QueueStatus contains information on sent and not sent events. Basically, this information can be used for debug
/// purposes. If queue contain not sent events (which were already attempted to dispatch) than in common case that
/// would mean some problem with reported events configuration (for example, for performance events it can mean that site
/// on which event was reported have not configured for DMP feeding yet).
///
/// returns:
/// current status of events queue
+ (CXQueueStatus * _Nonnull)queueStatus SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface CXCxense (SWIFT_EXTENSION(CxenseSDK_TV))
/// Create Content widget instance.
/// \param id widget identifier
///
/// \param context Content context
///
/// \param user Content user descriptor
///
///
/// returns:
/// initialized Content widget
+ (CXContentWidget * _Nonnull)makeWidgetWithId:(NSString * _Nonnull)id context:(CXContentContext * _Nonnull)context user:(CXContentUser * _Nullable)user SWIFT_WARN_UNUSED_RESULT;
@end



@class CXDmpUser;
@class CXDmpSegmentsHolder;
@class CXDmpUserData;
@class CXDmpExternalProfile;

@interface CXCxense (SWIFT_EXTENSION(CxenseSDK_TV))
/// Retrieves a suitably authorized slice of a given user’s interest profile. The returned profile data will
/// have been gathered from within the network of sites that the client has access to. This includes data
/// from, e.g., custom taxonomies and custom parameters.
/// \param id Identifies the user whose user profile should be returned.
///
/// \param type The type of user identifier, i.e., tells us how to interpret id. The value ‘cx’ indicates a Cxense-specific identifier, either an internal cross-site user id returned from an API such as /traffic/data, or a site-specific id obtained from cX.getUserId() function call from cx.js. Customer-specific identifiers via a customer-assigned prefix are also possible.
///
/// \param groups A list of strings that specify profile item groups to keep in the returned profile (see below for descriptions of the profile field in the response object). If not specified, all groups available for the user will be returned. Group specifications may enable server-side optimizations on Cxense’s side, which can lead to a quicker response.
///
/// \param recent Returns quickly if this user has not been seen recently. Cxense stores user profile information in many storage layers, where the most recently seen profiles are the quickest profiles to retrieve. In an interactive session where events are generated (and as a consequence the user profile is updated and considered a fresh profile), it may be more appropriate to return quickly than wait for a complete response on the first page view.
///
/// \param identityTypes A set of customer-specific identifier types. If a corresponding customer identifier exists for the user, it will be included in the response.
///
/// \param callback function that will be called after retrieving data from the API
///
+ (void)userProfileForUserId:(NSString * _Nonnull)id identifierType:(NSString * _Nonnull)type :(NSArray<NSString *> * _Nullable)groups :(BOOL)recent :(NSArray<NSString *> * _Nullable)identityTypes :(void (^ _Nonnull)(CXDmpUser * _Nullable, NSError * _Nullable))callback;
/// Retrieves a list of all segments where the user is a member.
/// important:
///
/// This function behaves differently according to consent options given. If user consent is required, but
/// ‘segment’ option was not given function will return an empty segments list.
/// \param userIds A list of user identifiers to consult if multiple identities are available.
///
/// \param siteGroupIds The list of site groups to retrieve segments for.
///
/// \param callback function that will be called after retrieving data from the API
///
+ (void)userSegmentIdsForUserIdentifiers:(NSArray<CXDmpUserIdentifier *> * _Nonnull)userIds andSiteGroupIds:(NSArray<NSString *> * _Nonnull)siteGroupIds :(void (^ _Nonnull)(CXDmpSegmentsHolder * _Nullable, NSError * _Nullable))callback;
+ (void)userExternalDataWithIdentifierType:(NSString * _Nonnull)type andUserId:(NSString * _Nullable)userId :(void (^ _Nonnull)(NSArray<CXDmpUserData *> * _Nullable, NSError * _Nullable))callback;
+ (void)deleteUserExternalWithIdentifierType:(NSString * _Nonnull)type andUserId:(NSString * _Nonnull)userId :(void (^ _Nonnull)(NSError * _Nullable))callback;
+ (void)userExternalLinkForCxenseId:(NSString * _Nonnull)cxId identifierType:(NSString * _Nonnull)identifierType :(void (^ _Nonnull)(CXDmpUserIdentifier * _Nullable, NSError * _Nullable))callback;
+ (void)updateUserExternalDataForUserId:(NSString * _Nonnull)userId identifierType:(NSString * _Nonnull)type profiles:(NSArray<CXDmpExternalProfile *> * _Nonnull)profiles :(void (^ _Nonnull)(NSError * _Nullable))callback;
+ (void)setUserExternalLinkForUserId:(NSString * _Nonnull)userId identifierType:(NSString * _Nonnull)type cxenseId:(NSString * _Nonnull)cxenseId :(void (^ _Nonnull)(CXDmpUserIdentifier * _Nullable, NSError * _Nullable))callback;
@end


SWIFT_CLASS_NAMED("DMPCustomParameter")
@interface CXDmpCustomParameter : NSObject
- (nonnull instancetype)initWithGroup:(NSString * _Nonnull)group item:(NSString * _Nonnull)item type:(NSString * _Nullable)type OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("DMPExternalProfile")
@interface CXDmpExternalProfile : NSObject
@property (nonatomic, copy) NSString * _Nonnull group;
@property (nonatomic, copy) NSString * _Nonnull item;
- (nonnull instancetype)initWithGroup:(NSString * _Nonnull)group item:(NSString * _Nonnull)item OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("DMPGroup")
@interface CXDmpGroup : NSObject
/// Represents category or type of the information.
@property (nonatomic, copy) NSString * _Nonnull group;
/// The number of times the item/group combination was generated from the page content.
@property (nonatomic) NSInteger count;
/// Indicates the relative prominence of the item/group combination.
@property (nonatomic) float weight;
- (nonnull instancetype)initWithGroup:(NSString * _Nonnull)group count:(NSInteger)count weight:(float)weight OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("DMPProfile")
@interface CXDmpProfile : NSObject
/// Array of CxenseDMPGroup objects associated with the item.
@property (nonatomic, copy) NSArray<CXDmpGroup *> * _Nonnull groups;
/// The item which is to be associated with the groups.
@property (nonatomic, copy) NSString * _Nonnull item;
- (nonnull instancetype)initWithGroups:(NSArray<CXDmpGroup *> * _Nonnull)groups item:(NSString * _Nonnull)item OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("DMPSegmentsHolder")
@interface CXDmpSegmentsHolder : NSObject
@property (nonatomic, copy) NSArray<NSString *> * _Nullable segments;
- (nonnull instancetype)initWithSegments:(NSArray<NSString *> * _Nonnull)segments OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// User model.
SWIFT_CLASS_NAMED("DMPUser")
@interface CXDmpUser : NSObject
/// The user identifier.
@property (nonatomic, copy) NSString * _Nonnull userId;
/// The user identifier type.
@property (nonatomic, copy) NSString * _Nonnull userType;
/// Array of CxenseDMPProfile objects, containing the available parts of the user profile.
@property (nonatomic, copy) NSArray<CXDmpProfile *> * _Nonnull profiles;
/// Array of CxenseDMPUserIdentifier objects, containing the identities the user is known as.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable identities;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("DMPUserData")
@interface CXDmpUserData : NSObject
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, copy) NSString * _Nonnull type;
@property (nonatomic, copy) NSArray<CXDmpExternalProfile *> * _Nonnull profiles;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id type:(NSString * _Nonnull)type profiles:(NSArray<CXDmpExternalProfile *> * _Nonnull)profiles OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("DMPUserIdentifier")
@interface CXDmpUserIdentifier : NSObject
/// Site specific identifier (type cx) or external user identifier type.
@property (nonatomic, copy) NSString * _Nonnull type;
/// Value of the user identifier.
@property (nonatomic, copy) NSString * _Nonnull identifier;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier type:(NSString * _Nonnull)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Mode of dispatch mechanism controls events sending mechanism.
typedef SWIFT_ENUM_NAMED(NSInteger, CXDispatchMode, "DispatchMode", open) {
/// All events will be stored in local cache
  CXDispatchModeOffline = 0,
/// All events will be dispatched automatically after they were initially reported.
  CXDispatchModeOnline = 1,
};


/// Base class that is property container for properties of events of different types.
SWIFT_CLASS_NAMED("Event")
@interface CXEvent : NSObject
/// Initialize new instance of Event
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Store property’s value under specified key.
/// \param key name of the key under which property’s value will be stored
///
/// \param value property’s value that will be stored
///
- (void)addParameterForKey:(NSString * _Nonnull)key withValue:(id _Nonnull)value;
/// Get property’s value for provided key.
/// \param key name of the key under which value is stored
///
///
/// returns:
/// property’s value if exist
- (id _Nullable)getParameter:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// An alternative specification for eventId, meant to be used by the sendEvent(..) function or similar.
/// Multiple events on the same page view must have distinct rnd values. See the clarification below.
@property (nonatomic, copy) NSString * _Nullable rnd;
/// Human readable custom name of the event. It will be used as event’s identifier
/// for calls like ‘trackActiveTime’.
@property (nonatomic, copy) NSString * _Nonnull name;
@end




/// Describes network level restriction that controls events sending mechanism.
typedef SWIFT_ENUM_NAMED(NSInteger, CXNetworkRestriction, "NetworkRestriction", open) {
/// Restrict any event from being send
  CXNetworkRestrictionNone = -1,
/// Events will be send only if network connection is set through GPRS as a minimal condition
  CXNetworkRestrictionGprs = 0,
/// Events will be send only if network connection is set throuh 3G / LTE as a minimal condition
  CXNetworkRestrictionMobile = 1,
/// Events will be send only if network connection is set through Wi-Fi
  CXNetworkRestrictionWifi = 2,
};


/// Event that indicate page views.
/// Page view events will be pushed to Insight.
SWIFT_CLASS_NAMED("PageViewEvent")
@interface CXPageViewEvent : CXEvent
/// Create and initialize new instance of page view event.
/// \param name event’s name. It is strongly recommended to provide unique name for the event.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
/// The Cxense site-specific persistent cookie. Contains a random number that identifies the user. Must be at least 16 characters long. Allowed characters: A-Z, a-z, 0-9, “_”, “-”, “+” and “.”.
@property (nonatomic, copy) NSString * _Nonnull persistentCookie;
/// The URL of the page. Must be a syntactically valid URL, or else the event will be dropped.
@property (nonatomic, copy) NSString * _Nullable location;
/// Identifier of tracked content.
/// Note: contentId and location are mutually exclusive. In case if both were set - contentId will be preffered.
@property (nonatomic, copy) NSString * _Nullable contentId;
/// The URL of the referring page.
@property (nonatomic, copy) NSString * _Nullable referrer;
/// The Cxense site identifier.
@property (nonatomic, copy) NSString * _Nullable siteId;
/// What type of event is this? The value pgv denotes a page-view event.
@property (nonatomic, copy) NSString * _Nonnull type;
/// To which version of the API is this requested targeted
@property (nonatomic, copy) NSString * _Nonnull apiVersion;
/// Add external user identifier. Pay attention that you can add only 5 external ids per event.
/// All external ids above that will be ignored.
/// It will also ignore duplicate items, and items with over 64 characters in id, or over 10 characters in type.
/// \param id external identifier of the user
///
/// \param userType type of the user
///
- (void)addExternalUserId:(NSString * _Nonnull)id withType:(NSString * _Nonnull)userType;
/// Clears all external ids from current event.
- (void)clearExternalUserIds;
/// Add custom parameter to the event.
/// Event’s custom parameters keys are prefixed with “cp_” string
/// automatically. You do not need to prefix them manually.
/// \param key custom parameter’s key
///
/// \param value custom parameter’s value
///
- (void)addCustomParameterForKey:(NSString * _Nonnull)key withValue:(NSString * _Nonnull)value;
/// Get custom parameter’s value.
/// Event’s custom parameters keys are prefixed with “cp_” string
/// automatically. You do not need to prefix them manually. Use plain key’s name
/// to retrieve custom parameter’s value.
/// \param key custom parameter’s key
///
///
/// returns:
/// custom parameter’s value
- (NSString * _Nullable)getCustomParameterForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Add user profile parameter to the event.
/// Event’s user profile parameters keys are prefixed with “cp_u_” string
/// automatically. You do not need to prefix them manually.
/// \param key user profile parameter’s key
///
/// \param value user profile parameter’s value
///
- (void)addUserProfileParameterForKey:(NSString * _Nonnull)key withValue:(NSString * _Nonnull)value;
/// Get user profile parameter’s value.
/// Event’s custom parameters keys are prefixed with “cp_u_” string
/// automatically. You do not need to prefix them manually. Use plain key’s name
/// to retrieve user profile parameter’s value.
/// \param key user profile parameter’s key
///
///
/// returns:
/// user profile parameter’s value
- (NSString * _Nullable)getUserProfileParameterForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class is responsible for producing page view events instances
SWIFT_CLASS_NAMED("PageViewEventBuilder")
@interface CXPageViewEventBuilder : BaseEventBuilder
/// Add user profile parameter to the event.
/// Event’s user profile parameters keys are prefixed with “cp_u_” string
/// automatically. You do not need to prefix them manually.
/// \param key user profile parameter’s key
///
/// \param value user profile parameter’s value
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)addUserProfileParameterForKey:(NSString * _Nonnull)key withValue:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// Add custom parameter to the event.
/// Event’s custom parameters keys are prefixed with “cp_” string
/// automatically. You do not need to prefix them manually.
/// \param key custom parameter’s key
///
/// \param value custom parameter’s value
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)addCustomParameterForKey:(NSString * _Nonnull)key withValue:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// Add external user identifier. Pay attention that you can add only 5 external ids per event.
/// \param id external identifier of the user
///
/// \param userType type of the user
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)addExternalUserId:(NSString * _Nonnull)id withType:(NSString * _Nonnull)userType SWIFT_WARN_UNUSED_RESULT;
/// Set location of the page. Must be a syntactically valid URL, or else the event will be dropped.
/// \param loc URL of the page
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)setLocation:(NSString * _Nonnull)loc SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)setReferrer:(NSString * _Nonnull)ref SWIFT_WARN_UNUSED_RESULT;
/// Set identifier of tracked content.
/// Note: contentId and location are mutually exclusive.
/// \param cid identifier of the content
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)setContentId:(NSString * _Nonnull)cid SWIFT_WARN_UNUSED_RESULT;
/// Set Cxense site-specific persistent cookie
/// Note: the Cxense site-specific persistent cookie. Contains a random number that identifies the user. Must be at least 16 characters long. Allowed characters: A-Z, a-z, 0-9, “_”, “-”, “+” and “.”.
/// \param ckp persistent cookie
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)setPersistentCookie:(NSString * _Nonnull)ckp SWIFT_WARN_UNUSED_RESULT;
/// Create page view event builder’s instance that can be used for
/// event creation and parameters validation.
/// \param name event’s name. It is strongly recommended to provide unique name for the event.
///
/// \param siteId the analytics site identifier to be associated with the events.
///
///
/// returns:
/// event builder instance
+ (CXPageViewEventBuilder * _Nonnull)makeBuilderWithName:(NSString * _Nonnull)name siteId:(NSString * _Nonnull)siteId SWIFT_WARN_UNUSED_RESULT;
@end



@interface CXPageViewEventBuilder (SWIFT_EXTENSION(CxenseSDK_TV))
- (CXPageViewEvent * _Nullable)build:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// Event that indicate any type of performance event like click, conversion, etc.
/// Performance events will be pushed to DMP.
SWIFT_CLASS_NAMED("PerformanceEvent")
@interface CXPerformanceEvent : CXEvent
/// Create and initialize new instance of performance event.
/// \param name event’s name. It is strongly recommended to provide unique name for the event.
///
/// \param type differentiates various event types, e.g., “click”, “impression”, “conversion”, etc.
///
/// \param origin differentiates various DMP applications used by the customer. Must be prefixed by the customer prefix.
///
/// \param siteId the analytics site identifier to be associated with the events.
///
/// \param userIds list of known user identities to identify the user. Note that different users must be fed as different events.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name type:(NSString * _Nonnull)type origin:(NSString * _Nonnull)origin siteId:(NSString * _Nonnull)siteId andUserIds:(NSArray<CXDmpUserIdentifier *> * _Nonnull)userIds OBJC_DESIGNATED_INITIALIZER;
/// An optional list of customer-defined parameters.
/// Parameters fed with DMP events follow the same syntactical restrictions and limits as
/// for ordinary custom-parameters for analytics events.
@property (nonatomic, copy) NSArray<CXDmpCustomParameter *> * _Nullable customParameters;
/// Add custom parameter to the event.
/// \param key custom parameter’s key
///
/// \param value custom parameter’s value
///
- (void)addCustomParameter:(CXDmpCustomParameter * _Nonnull)param;
/// An optional list of matching segments to be reported.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable segmentIds;
/// Differentiates various event types, e.g., “click”, “impression”, “conversion”, etc.
@property (nonatomic, copy) NSString * _Nonnull type;
/// Differentiates various DMP applications used by the customer. Must be prefixed by the customer prefix.
@property (nonatomic, copy) NSString * _Nonnull origin;
/// The analytics site identifier to be associated with the events.
@property (nonatomic, copy) NSString * _Nonnull siteId;
/// An alternative specification for pageViewEventId, meant to be used by the sendEvent(..) function or similar.
/// In order to link DMP events to page views this value must be identical to the rnd value of the page view
/// event. See the clarification below.
@property (nonatomic, copy) NSString * _Nullable prnd;
/// List of known user identities to identify the user.
/// Note that different users must be fed as different events.
@property (nonatomic, copy) NSArray<CXDmpUserIdentifier *> * _Nonnull userIds;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class is responsible for performance event instances creation.
SWIFT_CLASS_NAMED("PerformanceEventBuilder")
@interface CXPerformanceEventBuilder : BaseEventBuilder
/// Set exact time of an event.
/// \param interval exact time of event
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)setTime:(NSTimeInterval)interval SWIFT_WARN_UNUSED_RESULT;
/// Set a value uniquely identifying this event.
/// Note: pay attention that multiple events on the same screen / page must have distinct ‘eventId’ values.
/// \param eid identifier of event
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)setEventId:(NSInteger)eid SWIFT_WARN_UNUSED_RESULT;
/// Set a value uniquely identifying the corresponding page view event.
/// \param pvId identifier of page view event
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)setPageViewEventId:(NSInteger)pvId SWIFT_WARN_UNUSED_RESULT;
/// Set an alternative identifier of associated page view event.
/// Note: ‘prnd’ value (which is pv event’s identifier) can be retrieved from page view event instance.
/// \param pvId identifier of page view event
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)setPrnd:(NSString * _Nonnull)pvId SWIFT_WARN_UNUSED_RESULT;
/// Set segments identifiers to event.
/// Note: pay attention that this method will overwrite segment ids that were
/// previously added by ‘addSegmentId’ function.
/// \param ids identifiers of segments
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)setSegmentIds:(NSArray<NSString *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
/// Add identifier of the segment to event.
/// \param segmentId identifier of segment
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)addSegmentId:(NSString * _Nonnull)segmentId SWIFT_WARN_UNUSED_RESULT;
/// Add custom-parameter to performance event.
/// Note: Custom parameters - an optional list of customer-defined parameters.
/// Parameters fed with DMP events follow the same syntactical restrictions and limits as
/// for ordinary custom-parameters for analytics events.
/// \param param performance event’s custom parameter descriptor
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)addCustomParameter:(CXDmpCustomParameter * _Nonnull)param SWIFT_WARN_UNUSED_RESULT;
/// Create performance event builder’s instance that can be used for
/// event’s creation and parameters validation.
/// \param name event’s name. It is strongly recommended to provide unique name for the event.
///
/// \param type differentiates various event types, e.g., “click”, “impression”, “conversion”, etc.
///
/// \param origin differentiates various DMP applications used by the customer. Must be prefixed
/// by the customer prefix.
///
/// \param siteId the analytics site identifier to be associated with the events.
///
/// \param uids list of known user identities to identify the user. Note that different users must be fed
/// as different events.
///
///
/// returns:
/// event builder instance
+ (CXPerformanceEventBuilder * _Nonnull)makeBuilderWithName:(NSString * _Nonnull)name type:(NSString * _Nonnull)type origin:(NSString * _Nonnull)origin siteId:(NSString * _Nonnull)siteId andUserIds:(NSArray<CXDmpUserIdentifier *> * _Nonnull)uids SWIFT_WARN_UNUSED_RESULT;
@end



@interface CXPerformanceEventBuilder (SWIFT_EXTENSION(CxenseSDK_TV))
- (CXPerformanceEvent * _Nullable)build:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// QueueStatus descriptor that brings information about current state of the events queue.
SWIFT_CLASS_NAMED("QueueStatus")
@interface CXQueueStatus : NSObject
/// Contains identifiers of events that were successfully sent to the server and was not cleared yet.
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull sentEvents;
/// Contains identifiers of events that were not sent for certain reason (failure or just dispatch loop did not get them yet).
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull notSentEvents;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Defines type of errors that can be recieved from the back end services.
SWIFT_CLASS("_TtC12CxenseSDK_TV11ServerError")
@interface ServerError : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef CXENSESDK_TV_SWIFT_H
#define CXENSESDK_TV_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CxenseSDK_TV",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC12CxenseSDK_TV16BaseEventBuilder")
@interface BaseEventBuilder : NSObject
/// Set alternative specification for eventId.
/// \param eventRnd identifier of event
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)setRnd:(NSString * _Nonnull)eventRnd SWIFT_WARN_UNUSED_RESULT;
/// Store property’s value under specified key.
/// \param key name of the key under which property’s value will be stored
///
/// \param value property’s value that will be stored
///
- (nonnull instancetype)addParameterForKey:(NSString * _Nonnull)key withValue:(id _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("CCECustomParameter")
@interface CXCceCustomParameter : NSObject
- (nonnull instancetype)initWithGroup:(NSString * _Nonnull)group item:(NSString * _Nonnull)item type:(NSString * _Nullable)type OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum CXNetworkRestriction : NSInteger;
enum CXDispatchMode : NSInteger;

/// Protocol defines properties requirements set that is vital for configuring
/// work of Cxense SDK.
SWIFT_CLASS_NAMED("Configuration")
@interface CXConfiguration : NSObject
/// Name of the user on behalve of which API services will be called.
/// Can be obtained from {dmp|insight}.cxense.com
/// This is required property.
@property (nonatomic, copy) NSString * _Nonnull userName;
/// API key of the user on behalve of which API services will be called.
/// Can be obtained from {dmp|insight}.cxense.com
/// This is required property.
@property (nonatomic, copy) NSString * _Nonnull apiKey;
/// Defines timeout in seconds between attempts to send all reported
/// event by dispatch loop.
/// By default it will be set to 30 seconds.
@property (nonatomic) NSTimeInterval dispatchInterval;
/// Defines time period in seconds during which all reported events
/// that were already sent to back-end will last in the local database.
/// After that period all events were considered outdated will be removed
/// from local database.
/// By default it will be set to 7 days.
@property (nonatomic) NSTimeInterval outdatedTimeout;
/// Defines network conditions upon which dispatch can send events.
/// By default it will be set to ‘.none’.
@property (nonatomic) enum CXNetworkRestriction networkRestriction;
/// Defines dispatch conditions upon which events will be sent.
/// By default it will be set to ‘.online’.
@property (nonatomic) enum CXDispatchMode dispatchMode;
/// Defines identifier of persisted query that will be used for
/// performance events pushing through DMP pixel.
@property (nonatomic, copy) NSString * _Nullable dmpPushPersistentId;
/// User agent string that will be reported in all API calls
/// as ‘User-Agent’ http header.
/// By default it will be obtained from WKWebView.
@property (nonatomic, copy) NSString * _Nonnull userAgent;
/// Shows whether automatic meta-information tracking is enabled or not.
/// Under meta-information following items are meant:
/// <ul>
///   <li>
///     app name
///   </li>
///   <li>
///     app version
///   </li>
///   <li>
///     sdk version
///   </li>
/// </ul>
/// In case this flag is enabled, all specified parameters will be send
/// as events’ custom parameters.
/// By default it will be set to ‘true’.
@property (nonatomic) BOOL autoMetaInfTrackingEnabled;
/// Global callback functions that will be invoked on each event dispatch operation.
/// Can be used to debug events sending and see exact reqsons that prevented events’ dispatch.
@property (nonatomic, copy) void (^ _Nullable eventsCallback)(NSString * _Nonnull, BOOL, NSError * _Nullable);
/// Initialize new configuration instance with specified user name and API key.
/// All other parameters will have default values set.
/// \param userName name of the user under which API will be accessed.
///
/// \param apiKey API key. It can be obtained from https://{insight|dmp}.cxense.com
///
- (nonnull instancetype)initWithUserName:(NSString * _Nonnull)userName apiKey:(NSString * _Nonnull)apiKey OBJC_DESIGNATED_INITIALIZER;
/// Initialize new configuration instance.
/// All parameters will have default values set.
- (nonnull instancetype)init;
@end

/// Describes consent options.
typedef SWIFT_ENUM_NAMED(NSInteger, CXConsentOption, "ConsentOptions", open) {
/// Required, set if this event was obtained and may only be processed with the user’s consent
  CXConsentOptionConsentRequired = 0,
/// Page view tracking, DMP event tracking and browsing habit collection to understand a user’s interests and profile
  CXConsentOptionPvAllowed = 1,
/// Personalisation of content recommendations and suggested content based on user interests and browsing habits
  CXConsentOptionRecsAllowed = 2,
/// Audience segmentation, processing of browsing habits and first party data to include users in specific audience segments
  CXConsentOptionSegmentAllowed = 3,
/// Targeting advertising based on browsing habits and audience segmentation
  CXConsentOptionAdAllowed = 4,
};


SWIFT_CLASS_NAMED("ContentContext")
@interface CXContentContext : NSObject
/// The URL.
@property (nonatomic, copy) NSString * _Nullable url;
/// Specifies/overrides the pageclass of the current page.
@property (nonatomic, copy) NSString * _Nullable pageclass;
/// Specifies/overrides the sentiment of the current page.
@property (nonatomic, copy) NSString * _Nullable sentiment;
/// Specifies/overrides the recs-recommending setting of the current page.
@property (nonatomic) BOOL recommending;
/// Specifies/overrides the categories of the current page.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable categories;
/// Parameter object. Object with key and value. This is used for placeholders.
@property (nonatomic, copy) NSArray<NSDictionary<NSString *, NSString *> *> * _Nullable parameters;
/// A list of dynamic keywords describing the context.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable keywords;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable neighbors;
/// The URL of the document that ‘linked’ to this page.
@property (nonatomic, copy) NSString * _Nullable referrer;
/// Convenience parameters setter function
- (void)addParameter:(NSString * _Nonnull)key :(NSString * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("ContentRecommendation")
@interface CXContentRecommendation : NSObject
@property (nonatomic, copy) NSString * _Nonnull url;
@property (nonatomic, copy) NSString * _Nonnull clickUrl;
@property (nonatomic, copy) NSString * _Nonnull title;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable data;
@property (nonatomic, copy) NSString * _Nullable dominantthumbnail;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ContentUser")
@interface CXContentUser : NSObject
/// Dictionary of IDs (key-value where id-type is key, and the id is value).
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull ids;
/// Array of likes.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable likes;
/// Array of dislikes.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable dislikes;
- (nonnull instancetype)initWithIds:(NSDictionary<NSString *, NSString *> * _Nonnull)ids likes:(NSArray<NSString *> * _Nullable)likes dislikes:(NSArray<NSString *> * _Nullable)dislikes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ContentWidget")
@interface CXContentWidget : NSObject
/// The widget id for the widget in Cxense Content.
@property (nonatomic, copy) NSString * _Nonnull widgetId;
/// Optional context for the widget.
@property (nonatomic, strong) CXContentContext * _Nullable context;
/// Optional user for the widget.
@property (nonatomic, strong) CXContentUser * _Nullable user;
/// Optional list of consent options.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable consent;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id context:(CXContentContext * _Nullable)context user:(CXContentUser * _Nullable)user consent:(NSArray<NSString *> * _Nullable)consent OBJC_DESIGNATED_INITIALIZER;
/// Registers a click on the recommendation.
/// \param reco recommendation item with which click was performed
///
- (void)trackClickFor:(CXContentRecommendation * _Nonnull)reco;
/// Fetches recommendation items using the properties set on the widget.
/// The recommendations are returned in the completion block as well as stored in the items property.
/// \param withCallback callback function that will be executed after recieving result or error
///
- (void)fetchItemsWithCallback:(void (^ _Nonnull)(NSArray<CXContentRecommendation *> * _Nullable, NSError * _Nullable))callback;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CXDmpCustomParameter;
@class CXDmpUserIdentifier;

/// Class is responsible for performance event instances creation.
SWIFT_CLASS_NAMED("ConversionEventBuilder")
@interface CXConversionEventBuilder : BaseEventBuilder
/// Set exact time of an event.
/// \param interval exact time of event
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)setTime:(NSTimeInterval)interval SWIFT_WARN_UNUSED_RESULT;
/// Set a value uniquely identifying this event.
/// Note: pay attention that multiple events on the same screen / page must have distinct ‘eventId’ values.
/// \param eid identifier of event
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)setEventId:(NSInteger)eid SWIFT_WARN_UNUSED_RESULT;
/// Set a value uniquely identifying the corresponding page view event.
/// \param pvId identifier of page view event
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)setPageViewEventId:(NSInteger)pvId SWIFT_WARN_UNUSED_RESULT;
/// Set an alternative identifier of associated page view event.
/// Note: ‘prnd’ value (which is pv event’s identifier) can be retrieved from page view event instance.
/// \param pvId identifier of page view event
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)setPrnd:(NSString * _Nonnull)pvId SWIFT_WARN_UNUSED_RESULT;
/// Set segments identifiers to event.
/// Note: pay attention that this method will overwrite segment ids that were
/// previously added by ‘addSegmentId’ function.
/// \param ids identifiers of segments
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)setSegmentIds:(NSArray<NSString *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
/// Add identifier of the segment to event.
/// \param segmentId identifier of segment
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)addSegmentId:(NSString * _Nonnull)segmentId SWIFT_WARN_UNUSED_RESULT;
/// Add custom-parameter to performance event.
/// Note: Custom parameters - an optional list of customer-defined parameters.
/// Parameters fed with DMP events follow the same syntactical restrictions and limits as
/// for ordinary custom-parameters for analytics events.
/// \param param performance event’s custom parameter descriptor
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)addCustomParameter:(CXDmpCustomParameter * _Nonnull)param SWIFT_WARN_UNUSED_RESULT;
/// Create performance event builder’s instance that can be used for
/// event’s creation and parameters validation.
/// \param name event’s name. It is strongly recommended to provide unique name for the event.
///
/// \param type differentiates various event types, e.g., “click”, “impression”, “conversion”, etc.
///
/// \param origin differentiates various DMP applications used by the customer. Must be prefixed
/// by the customer prefix.
///
/// \param siteId the analytics site identifier to be associated with the events.
///
/// \param uids list of known user identities to identify the user. Note that different users must be fed
/// as different events.
///
///
/// returns:
/// event builder instance
+ (CXConversionEventBuilder * _Nonnull)makeBuilderWithName:(NSString * _Nonnull)name type:(NSString * _Nonnull)type origin:(NSString * _Nonnull)origin siteId:(NSString * _Nonnull)siteId andUserIds:(NSArray<CXDmpUserIdentifier *> * _Nonnull)uids SWIFT_WARN_UNUSED_RESULT;
@end


@class CXPerformanceEvent;

@interface CXConversionEventBuilder (SWIFT_EXTENSION(CxenseSDK_TV))
- (CXPerformanceEvent * _Nullable)build:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

@class CXEvent;
@class CXQueueStatus;

/// Main and the only class you need to use to get access to Cxense APIs.
SWIFT_CLASS_NAMED("Cxense")
@interface CXCxense : NSObject
/// Track active time for event with particular name.
/// \param name name of the event for which active time must be tracked
///
+ (void)trackActiveTimeForEvent:(NSString * _Nonnull)name activeTime:(NSInteger)activeTime;
/// Schedule specified event to dispatching it to back-end.
/// important:
///
/// This function behaves differently according to consent options given. If user consent is required, but
/// ‘pv’ option was not given - event will not be reported.
/// \param event event of certain type
///
+ (void)reportEvent:(CXEvent * _Nonnull)event;
/// Schedule specified event to dispatching it to back-end.
/// important:
///
/// This function behaves differently according to consent options given. If user consent is required, but
/// ‘pv’ option was not given - event will not be reported.
/// \param event event of certain type
///
+ (void)reportConversionEvent:(CXEvent * _Nonnull)event;
/// Initialize Cxense SDK with provided configuration.
/// \param config configuration holder that will be used for the SDK setup
///
/// \param completion callback parameter to indicate that config was completed (in case of invocation in background thread
///
///
/// throws:
/// ConfigurationError instance in case configuration is not valid
+ (BOOL)initializeWithConfiguration:(CXConfiguration * _Nonnull)config error:(NSError * _Nullable * _Nullable)error :(void (^ _Nullable)(void))completion;
/// Returns the default user identifier is being used for events tracking, unless you override it for event.
/// This id uses the IDFV identifier for vendors
///
/// returns:
/// default user id
+ (NSString * _Nonnull)defaultUserId SWIFT_WARN_UNUSED_RESULT;
/// Forces sending events from queue to server.
+ (void)flushEventQueue;
/// Returns current event queue status.
/// Note:
/// QueueStatus contains information on sent and not sent events. Basically, this information can be used for debug
/// purposes. If queue contain not sent events (which were already attempted to dispatch) than in common case that
/// would mean some problem with reported events configuration (for example, for performance events it can mean that site
/// on which event was reported have not configured for DMP feeding yet).
///
/// returns:
/// current status of events queue
+ (CXQueueStatus * _Nonnull)queueStatus SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface CXCxense (SWIFT_EXTENSION(CxenseSDK_TV))
/// Create Content widget instance.
/// \param id widget identifier
///
/// \param context Content context
///
/// \param user Content user descriptor
///
///
/// returns:
/// initialized Content widget
+ (CXContentWidget * _Nonnull)makeWidgetWithId:(NSString * _Nonnull)id context:(CXContentContext * _Nonnull)context user:(CXContentUser * _Nullable)user SWIFT_WARN_UNUSED_RESULT;
@end



@class CXDmpUser;
@class CXDmpSegmentsHolder;
@class CXDmpUserData;
@class CXDmpExternalProfile;

@interface CXCxense (SWIFT_EXTENSION(CxenseSDK_TV))
/// Retrieves a suitably authorized slice of a given user’s interest profile. The returned profile data will
/// have been gathered from within the network of sites that the client has access to. This includes data
/// from, e.g., custom taxonomies and custom parameters.
/// \param id Identifies the user whose user profile should be returned.
///
/// \param type The type of user identifier, i.e., tells us how to interpret id. The value ‘cx’ indicates a Cxense-specific identifier, either an internal cross-site user id returned from an API such as /traffic/data, or a site-specific id obtained from cX.getUserId() function call from cx.js. Customer-specific identifiers via a customer-assigned prefix are also possible.
///
/// \param groups A list of strings that specify profile item groups to keep in the returned profile (see below for descriptions of the profile field in the response object). If not specified, all groups available for the user will be returned. Group specifications may enable server-side optimizations on Cxense’s side, which can lead to a quicker response.
///
/// \param recent Returns quickly if this user has not been seen recently. Cxense stores user profile information in many storage layers, where the most recently seen profiles are the quickest profiles to retrieve. In an interactive session where events are generated (and as a consequence the user profile is updated and considered a fresh profile), it may be more appropriate to return quickly than wait for a complete response on the first page view.
///
/// \param identityTypes A set of customer-specific identifier types. If a corresponding customer identifier exists for the user, it will be included in the response.
///
/// \param callback function that will be called after retrieving data from the API
///
+ (void)userProfileForUserId:(NSString * _Nonnull)id identifierType:(NSString * _Nonnull)type :(NSArray<NSString *> * _Nullable)groups :(BOOL)recent :(NSArray<NSString *> * _Nullable)identityTypes :(void (^ _Nonnull)(CXDmpUser * _Nullable, NSError * _Nullable))callback;
/// Retrieves a list of all segments where the user is a member.
/// important:
///
/// This function behaves differently according to consent options given. If user consent is required, but
/// ‘segment’ option was not given function will return an empty segments list.
/// \param userIds A list of user identifiers to consult if multiple identities are available.
///
/// \param siteGroupIds The list of site groups to retrieve segments for.
///
/// \param callback function that will be called after retrieving data from the API
///
+ (void)userSegmentIdsForUserIdentifiers:(NSArray<CXDmpUserIdentifier *> * _Nonnull)userIds andSiteGroupIds:(NSArray<NSString *> * _Nonnull)siteGroupIds :(void (^ _Nonnull)(CXDmpSegmentsHolder * _Nullable, NSError * _Nullable))callback;
+ (void)userExternalDataWithIdentifierType:(NSString * _Nonnull)type andUserId:(NSString * _Nullable)userId :(void (^ _Nonnull)(NSArray<CXDmpUserData *> * _Nullable, NSError * _Nullable))callback;
+ (void)deleteUserExternalWithIdentifierType:(NSString * _Nonnull)type andUserId:(NSString * _Nonnull)userId :(void (^ _Nonnull)(NSError * _Nullable))callback;
+ (void)userExternalLinkForCxenseId:(NSString * _Nonnull)cxId identifierType:(NSString * _Nonnull)identifierType :(void (^ _Nonnull)(CXDmpUserIdentifier * _Nullable, NSError * _Nullable))callback;
+ (void)updateUserExternalDataForUserId:(NSString * _Nonnull)userId identifierType:(NSString * _Nonnull)type profiles:(NSArray<CXDmpExternalProfile *> * _Nonnull)profiles :(void (^ _Nonnull)(NSError * _Nullable))callback;
+ (void)setUserExternalLinkForUserId:(NSString * _Nonnull)userId identifierType:(NSString * _Nonnull)type cxenseId:(NSString * _Nonnull)cxenseId :(void (^ _Nonnull)(CXDmpUserIdentifier * _Nullable, NSError * _Nullable))callback;
@end


SWIFT_CLASS_NAMED("DMPCustomParameter")
@interface CXDmpCustomParameter : NSObject
- (nonnull instancetype)initWithGroup:(NSString * _Nonnull)group item:(NSString * _Nonnull)item type:(NSString * _Nullable)type OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("DMPExternalProfile")
@interface CXDmpExternalProfile : NSObject
@property (nonatomic, copy) NSString * _Nonnull group;
@property (nonatomic, copy) NSString * _Nonnull item;
- (nonnull instancetype)initWithGroup:(NSString * _Nonnull)group item:(NSString * _Nonnull)item OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("DMPGroup")
@interface CXDmpGroup : NSObject
/// Represents category or type of the information.
@property (nonatomic, copy) NSString * _Nonnull group;
/// The number of times the item/group combination was generated from the page content.
@property (nonatomic) NSInteger count;
/// Indicates the relative prominence of the item/group combination.
@property (nonatomic) float weight;
- (nonnull instancetype)initWithGroup:(NSString * _Nonnull)group count:(NSInteger)count weight:(float)weight OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("DMPProfile")
@interface CXDmpProfile : NSObject
/// Array of CxenseDMPGroup objects associated with the item.
@property (nonatomic, copy) NSArray<CXDmpGroup *> * _Nonnull groups;
/// The item which is to be associated with the groups.
@property (nonatomic, copy) NSString * _Nonnull item;
- (nonnull instancetype)initWithGroups:(NSArray<CXDmpGroup *> * _Nonnull)groups item:(NSString * _Nonnull)item OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("DMPSegmentsHolder")
@interface CXDmpSegmentsHolder : NSObject
@property (nonatomic, copy) NSArray<NSString *> * _Nullable segments;
- (nonnull instancetype)initWithSegments:(NSArray<NSString *> * _Nonnull)segments OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// User model.
SWIFT_CLASS_NAMED("DMPUser")
@interface CXDmpUser : NSObject
/// The user identifier.
@property (nonatomic, copy) NSString * _Nonnull userId;
/// The user identifier type.
@property (nonatomic, copy) NSString * _Nonnull userType;
/// Array of CxenseDMPProfile objects, containing the available parts of the user profile.
@property (nonatomic, copy) NSArray<CXDmpProfile *> * _Nonnull profiles;
/// Array of CxenseDMPUserIdentifier objects, containing the identities the user is known as.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable identities;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("DMPUserData")
@interface CXDmpUserData : NSObject
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, copy) NSString * _Nonnull type;
@property (nonatomic, copy) NSArray<CXDmpExternalProfile *> * _Nonnull profiles;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id type:(NSString * _Nonnull)type profiles:(NSArray<CXDmpExternalProfile *> * _Nonnull)profiles OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("DMPUserIdentifier")
@interface CXDmpUserIdentifier : NSObject
/// Site specific identifier (type cx) or external user identifier type.
@property (nonatomic, copy) NSString * _Nonnull type;
/// Value of the user identifier.
@property (nonatomic, copy) NSString * _Nonnull identifier;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier type:(NSString * _Nonnull)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Mode of dispatch mechanism controls events sending mechanism.
typedef SWIFT_ENUM_NAMED(NSInteger, CXDispatchMode, "DispatchMode", open) {
/// All events will be stored in local cache
  CXDispatchModeOffline = 0,
/// All events will be dispatched automatically after they were initially reported.
  CXDispatchModeOnline = 1,
};


/// Base class that is property container for properties of events of different types.
SWIFT_CLASS_NAMED("Event")
@interface CXEvent : NSObject
/// Initialize new instance of Event
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Store property’s value under specified key.
/// \param key name of the key under which property’s value will be stored
///
/// \param value property’s value that will be stored
///
- (void)addParameterForKey:(NSString * _Nonnull)key withValue:(id _Nonnull)value;
/// Get property’s value for provided key.
/// \param key name of the key under which value is stored
///
///
/// returns:
/// property’s value if exist
- (id _Nullable)getParameter:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// An alternative specification for eventId, meant to be used by the sendEvent(..) function or similar.
/// Multiple events on the same page view must have distinct rnd values. See the clarification below.
@property (nonatomic, copy) NSString * _Nullable rnd;
/// Human readable custom name of the event. It will be used as event’s identifier
/// for calls like ‘trackActiveTime’.
@property (nonatomic, copy) NSString * _Nonnull name;
@end




/// Describes network level restriction that controls events sending mechanism.
typedef SWIFT_ENUM_NAMED(NSInteger, CXNetworkRestriction, "NetworkRestriction", open) {
/// Restrict any event from being send
  CXNetworkRestrictionNone = -1,
/// Events will be send only if network connection is set through GPRS as a minimal condition
  CXNetworkRestrictionGprs = 0,
/// Events will be send only if network connection is set throuh 3G / LTE as a minimal condition
  CXNetworkRestrictionMobile = 1,
/// Events will be send only if network connection is set through Wi-Fi
  CXNetworkRestrictionWifi = 2,
};


/// Event that indicate page views.
/// Page view events will be pushed to Insight.
SWIFT_CLASS_NAMED("PageViewEvent")
@interface CXPageViewEvent : CXEvent
/// Create and initialize new instance of page view event.
/// \param name event’s name. It is strongly recommended to provide unique name for the event.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
/// The Cxense site-specific persistent cookie. Contains a random number that identifies the user. Must be at least 16 characters long. Allowed characters: A-Z, a-z, 0-9, “_”, “-”, “+” and “.”.
@property (nonatomic, copy) NSString * _Nonnull persistentCookie;
/// The URL of the page. Must be a syntactically valid URL, or else the event will be dropped.
@property (nonatomic, copy) NSString * _Nullable location;
/// Identifier of tracked content.
/// Note: contentId and location are mutually exclusive. In case if both were set - contentId will be preffered.
@property (nonatomic, copy) NSString * _Nullable contentId;
/// The URL of the referring page.
@property (nonatomic, copy) NSString * _Nullable referrer;
/// The Cxense site identifier.
@property (nonatomic, copy) NSString * _Nullable siteId;
/// What type of event is this? The value pgv denotes a page-view event.
@property (nonatomic, copy) NSString * _Nonnull type;
/// To which version of the API is this requested targeted
@property (nonatomic, copy) NSString * _Nonnull apiVersion;
/// Add external user identifier. Pay attention that you can add only 5 external ids per event.
/// All external ids above that will be ignored.
/// It will also ignore duplicate items, and items with over 64 characters in id, or over 10 characters in type.
/// \param id external identifier of the user
///
/// \param userType type of the user
///
- (void)addExternalUserId:(NSString * _Nonnull)id withType:(NSString * _Nonnull)userType;
/// Clears all external ids from current event.
- (void)clearExternalUserIds;
/// Add custom parameter to the event.
/// Event’s custom parameters keys are prefixed with “cp_” string
/// automatically. You do not need to prefix them manually.
/// \param key custom parameter’s key
///
/// \param value custom parameter’s value
///
- (void)addCustomParameterForKey:(NSString * _Nonnull)key withValue:(NSString * _Nonnull)value;
/// Get custom parameter’s value.
/// Event’s custom parameters keys are prefixed with “cp_” string
/// automatically. You do not need to prefix them manually. Use plain key’s name
/// to retrieve custom parameter’s value.
/// \param key custom parameter’s key
///
///
/// returns:
/// custom parameter’s value
- (NSString * _Nullable)getCustomParameterForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Add user profile parameter to the event.
/// Event’s user profile parameters keys are prefixed with “cp_u_” string
/// automatically. You do not need to prefix them manually.
/// \param key user profile parameter’s key
///
/// \param value user profile parameter’s value
///
- (void)addUserProfileParameterForKey:(NSString * _Nonnull)key withValue:(NSString * _Nonnull)value;
/// Get user profile parameter’s value.
/// Event’s custom parameters keys are prefixed with “cp_u_” string
/// automatically. You do not need to prefix them manually. Use plain key’s name
/// to retrieve user profile parameter’s value.
/// \param key user profile parameter’s key
///
///
/// returns:
/// user profile parameter’s value
- (NSString * _Nullable)getUserProfileParameterForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class is responsible for producing page view events instances
SWIFT_CLASS_NAMED("PageViewEventBuilder")
@interface CXPageViewEventBuilder : BaseEventBuilder
/// Add user profile parameter to the event.
/// Event’s user profile parameters keys are prefixed with “cp_u_” string
/// automatically. You do not need to prefix them manually.
/// \param key user profile parameter’s key
///
/// \param value user profile parameter’s value
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)addUserProfileParameterForKey:(NSString * _Nonnull)key withValue:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// Add custom parameter to the event.
/// Event’s custom parameters keys are prefixed with “cp_” string
/// automatically. You do not need to prefix them manually.
/// \param key custom parameter’s key
///
/// \param value custom parameter’s value
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)addCustomParameterForKey:(NSString * _Nonnull)key withValue:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// Add external user identifier. Pay attention that you can add only 5 external ids per event.
/// \param id external identifier of the user
///
/// \param userType type of the user
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)addExternalUserId:(NSString * _Nonnull)id withType:(NSString * _Nonnull)userType SWIFT_WARN_UNUSED_RESULT;
/// Set location of the page. Must be a syntactically valid URL, or else the event will be dropped.
/// \param loc URL of the page
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)setLocation:(NSString * _Nonnull)loc SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)setReferrer:(NSString * _Nonnull)ref SWIFT_WARN_UNUSED_RESULT;
/// Set identifier of tracked content.
/// Note: contentId and location are mutually exclusive.
/// \param cid identifier of the content
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)setContentId:(NSString * _Nonnull)cid SWIFT_WARN_UNUSED_RESULT;
/// Set Cxense site-specific persistent cookie
/// Note: the Cxense site-specific persistent cookie. Contains a random number that identifies the user. Must be at least 16 characters long. Allowed characters: A-Z, a-z, 0-9, “_”, “-”, “+” and “.”.
/// \param ckp persistent cookie
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)setPersistentCookie:(NSString * _Nonnull)ckp SWIFT_WARN_UNUSED_RESULT;
/// Create page view event builder’s instance that can be used for
/// event creation and parameters validation.
/// \param name event’s name. It is strongly recommended to provide unique name for the event.
///
/// \param siteId the analytics site identifier to be associated with the events.
///
///
/// returns:
/// event builder instance
+ (CXPageViewEventBuilder * _Nonnull)makeBuilderWithName:(NSString * _Nonnull)name siteId:(NSString * _Nonnull)siteId SWIFT_WARN_UNUSED_RESULT;
@end



@interface CXPageViewEventBuilder (SWIFT_EXTENSION(CxenseSDK_TV))
- (CXPageViewEvent * _Nullable)build:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// Event that indicate any type of performance event like click, conversion, etc.
/// Performance events will be pushed to DMP.
SWIFT_CLASS_NAMED("PerformanceEvent")
@interface CXPerformanceEvent : CXEvent
/// Create and initialize new instance of performance event.
/// \param name event’s name. It is strongly recommended to provide unique name for the event.
///
/// \param type differentiates various event types, e.g., “click”, “impression”, “conversion”, etc.
///
/// \param origin differentiates various DMP applications used by the customer. Must be prefixed by the customer prefix.
///
/// \param siteId the analytics site identifier to be associated with the events.
///
/// \param userIds list of known user identities to identify the user. Note that different users must be fed as different events.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name type:(NSString * _Nonnull)type origin:(NSString * _Nonnull)origin siteId:(NSString * _Nonnull)siteId andUserIds:(NSArray<CXDmpUserIdentifier *> * _Nonnull)userIds OBJC_DESIGNATED_INITIALIZER;
/// An optional list of customer-defined parameters.
/// Parameters fed with DMP events follow the same syntactical restrictions and limits as
/// for ordinary custom-parameters for analytics events.
@property (nonatomic, copy) NSArray<CXDmpCustomParameter *> * _Nullable customParameters;
/// Add custom parameter to the event.
/// \param key custom parameter’s key
///
/// \param value custom parameter’s value
///
- (void)addCustomParameter:(CXDmpCustomParameter * _Nonnull)param;
/// An optional list of matching segments to be reported.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable segmentIds;
/// Differentiates various event types, e.g., “click”, “impression”, “conversion”, etc.
@property (nonatomic, copy) NSString * _Nonnull type;
/// Differentiates various DMP applications used by the customer. Must be prefixed by the customer prefix.
@property (nonatomic, copy) NSString * _Nonnull origin;
/// The analytics site identifier to be associated with the events.
@property (nonatomic, copy) NSString * _Nonnull siteId;
/// An alternative specification for pageViewEventId, meant to be used by the sendEvent(..) function or similar.
/// In order to link DMP events to page views this value must be identical to the rnd value of the page view
/// event. See the clarification below.
@property (nonatomic, copy) NSString * _Nullable prnd;
/// List of known user identities to identify the user.
/// Note that different users must be fed as different events.
@property (nonatomic, copy) NSArray<CXDmpUserIdentifier *> * _Nonnull userIds;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class is responsible for performance event instances creation.
SWIFT_CLASS_NAMED("PerformanceEventBuilder")
@interface CXPerformanceEventBuilder : BaseEventBuilder
/// Set exact time of an event.
/// \param interval exact time of event
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)setTime:(NSTimeInterval)interval SWIFT_WARN_UNUSED_RESULT;
/// Set a value uniquely identifying this event.
/// Note: pay attention that multiple events on the same screen / page must have distinct ‘eventId’ values.
/// \param eid identifier of event
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)setEventId:(NSInteger)eid SWIFT_WARN_UNUSED_RESULT;
/// Set a value uniquely identifying the corresponding page view event.
/// \param pvId identifier of page view event
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)setPageViewEventId:(NSInteger)pvId SWIFT_WARN_UNUSED_RESULT;
/// Set an alternative identifier of associated page view event.
/// Note: ‘prnd’ value (which is pv event’s identifier) can be retrieved from page view event instance.
/// \param pvId identifier of page view event
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)setPrnd:(NSString * _Nonnull)pvId SWIFT_WARN_UNUSED_RESULT;
/// Set segments identifiers to event.
/// Note: pay attention that this method will overwrite segment ids that were
/// previously added by ‘addSegmentId’ function.
/// \param ids identifiers of segments
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)setSegmentIds:(NSArray<NSString *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
/// Add identifier of the segment to event.
/// \param segmentId identifier of segment
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)addSegmentId:(NSString * _Nonnull)segmentId SWIFT_WARN_UNUSED_RESULT;
/// Add custom-parameter to performance event.
/// Note: Custom parameters - an optional list of customer-defined parameters.
/// Parameters fed with DMP events follow the same syntactical restrictions and limits as
/// for ordinary custom-parameters for analytics events.
/// \param param performance event’s custom parameter descriptor
///
///
/// returns:
/// builder’s instance
- (nonnull instancetype)addCustomParameter:(CXDmpCustomParameter * _Nonnull)param SWIFT_WARN_UNUSED_RESULT;
/// Create performance event builder’s instance that can be used for
/// event’s creation and parameters validation.
/// \param name event’s name. It is strongly recommended to provide unique name for the event.
///
/// \param type differentiates various event types, e.g., “click”, “impression”, “conversion”, etc.
///
/// \param origin differentiates various DMP applications used by the customer. Must be prefixed
/// by the customer prefix.
///
/// \param siteId the analytics site identifier to be associated with the events.
///
/// \param uids list of known user identities to identify the user. Note that different users must be fed
/// as different events.
///
///
/// returns:
/// event builder instance
+ (CXPerformanceEventBuilder * _Nonnull)makeBuilderWithName:(NSString * _Nonnull)name type:(NSString * _Nonnull)type origin:(NSString * _Nonnull)origin siteId:(NSString * _Nonnull)siteId andUserIds:(NSArray<CXDmpUserIdentifier *> * _Nonnull)uids SWIFT_WARN_UNUSED_RESULT;
@end



@interface CXPerformanceEventBuilder (SWIFT_EXTENSION(CxenseSDK_TV))
- (CXPerformanceEvent * _Nullable)build:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// QueueStatus descriptor that brings information about current state of the events queue.
SWIFT_CLASS_NAMED("QueueStatus")
@interface CXQueueStatus : NSObject
/// Contains identifiers of events that were successfully sent to the server and was not cleared yet.
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull sentEvents;
/// Contains identifiers of events that were not sent for certain reason (failure or just dispatch loop did not get them yet).
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull notSentEvents;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Defines type of errors that can be recieved from the back end services.
SWIFT_CLASS("_TtC12CxenseSDK_TV11ServerError")
@interface ServerError : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
